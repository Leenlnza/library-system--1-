// ‡πÉ‡∏ä‡πâ built-in modules ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á npm install
const http = require("http")
const fs = require("fs")
const path = require("path")
const url = require("url")

const PORT = 3000

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô memory)
const books = [
  {
    id: "1",
    title: "‡πÅ‡∏Æ‡∏£‡πå‡∏£‡∏µ‡πà ‡∏û‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Å‡∏±‡∏ö‡∏®‡∏¥‡∏•‡∏≤‡∏≠‡∏≤‡∏ñ‡∏£‡∏£‡∏û‡πå",
    author: "J.K. Rowling",
    category: "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢",
    available: true,
    coverImage: "https://via.placeholder.com/150x200/4f46e5/ffffff?text=Harry+Potter",
  },
  {
    id: "2",
    title: "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á",
    author: "‡∏®.‡∏î‡∏£.‡∏≠‡∏†‡∏¥‡∏ä‡∏±‡∏¢ ‡∏û‡∏±‡∏ô‡∏ò‡πÄ‡∏™‡∏ô",
    category: "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    available: true,
    coverImage: "https://via.placeholder.com/150x200/059669/ffffff?text=Economics",
  },
  {
    id: "3",
    title: "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏¥‡∏î‡∏ä‡πâ‡∏≤",
    author: "Daniel Kahneman",
    category: "‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤",
    available: false,
    borrowedBy: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
    borrowerPhone: "081-234-5678",
    borrowedDate: "2024-01-15",
    dueDate: "2024-01-29",
    coverImage: "https://via.placeholder.com/150x200/dc2626/ffffff?text=Thinking",
  },
  {
    id: "4",
    title: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢",
    author: "‡∏®.‡∏î‡∏£.‡∏™‡∏∏‡∏à‡∏¥‡∏ï ‡∏ß‡∏á‡∏©‡πå‡πÄ‡∏ó‡∏®",
    category: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
    available: true,
    coverImage: "https://via.placeholder.com/150x200/d97706/ffffff?text=History",
  },
  {
    id: "5",
    title: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° JavaScript",
    author: "John Doe",
    category: "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
    available: true,
    coverImage: "https://via.placeholder.com/150x200/7c3aed/ffffff?text=JavaScript",
  },
]

const history = [
  {
    id: "1",
    bookId: "3",
    bookTitle: "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏¥‡∏î‡∏ä‡πâ‡∏≤",
    borrower: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
    borrowerPhone: "081-234-5678",
    borrowedDate: "2024-01-15",
    dueDate: "2024-01-29",
    status: "borrowed",
  },
]

const server = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url, true)
  const pathname = parsedUrl.pathname
  const method = req.method

  // CORS headers
  res.setHeader("Access-Control-Allow-Origin", "*")
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
  res.setHeader("Access-Control-Allow-Headers", "Content-Type")

  if (method === "OPTIONS") {
    res.writeHead(200)
    res.end()
    return
  }

  console.log(`${method} ${pathname}`)

  // Serve static files
  // Note: This server expects all static files (index.html, style.css, script.js)
  // to be in the same directory as server-simple.js
  if (pathname === "/" || pathname === "/index.html") {
    serveFile("index.html", "text/html", res)
    return
  }
  if (pathname === "/style.css") {
    serveFile("style.css", "text/css", res)
    return
  }
  if (pathname === "/script.js") {
    serveFile("script.js", "application/javascript", res)
    return
  }

  // API Routes
  if (pathname === "/api/test" && method === "GET") {
    res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" })
    res.end(
      JSON.stringify({
        message: "API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥",
        timestamp: new Date().toISOString(),
        booksCount: books.length,
        historyCount: history.length,
        server: "Node.js Built-in HTTP Server",
      }),
    )
    return
  }

  if (pathname === "/api/books" && method === "GET") {
    console.log("üìö Serving books:", books.length, "books")
    res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" })
    res.end(JSON.stringify(books))
    return
  }

  if (pathname.match(/^\/api\/books\/(.+)\/borrow$/) && method === "POST") {
    const bookId = pathname.split("/")[3]
    handleBorrow(bookId, req, res)
    return
  }

  if (pathname.match(/^\/api\/books\/(.+)\/return$/) && method === "POST") {
    const bookId = pathname.split("/")[3]
    handleReturn(bookId, req, res)
    return
  }

  if (pathname === "/api/history" && method === "GET") {
    console.log("üìú Serving history:", history.length, "records")
    res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" })
    res.end(JSON.stringify(history))
    return
  }

  if (pathname === "/api/borrowed" && method === "GET") {
    const borrowedBooks = books.filter((book) => !book.available)
    console.log("üìã Serving borrowed books:", borrowedBooks.length, "books")
    res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" })
    res.end(JSON.stringify(borrowedBooks))
    return
  }

  // 404
  res.writeHead(404, { "Content-Type": "text/html; charset=utf-8" })
  res.end(`
    <!DOCTYPE html>
    <html>
    <head><title>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤</title></head>
    <body>
      <h1>‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h1>
      <p>Path: ${pathname}</p>
      <p><a href="/">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a></p>
    </body>
    </html>
  `)
})

function serveFile(filename, contentType, res) {
  const filePath = path.join(__dirname, filename)
  console.log("üìÑ Serving file:", filePath)

  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error("‚ùå File not found:", filePath)
      res.writeHead(404, { "Content-Type": "text/html; charset=utf-8" })
      res.end(`
        <!DOCTYPE html>
        <html>
        <head><title>‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö</title></head>
        <body>
          <h1>‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö</h1>
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filename}</p>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö server-simple.js</p>
          <p>‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ:</p>
          <ul>
            <li>server-simple.js</li>
            <li>index.html</li>
            <li>style.css</li>
            <li>script.js</li>
          </ul>
        </body>
        </html>
      `)
      return
    }
    res.writeHead(200, { "Content-Type": contentType + "; charset=utf-8" })
    res.end(data)
  })
}

function handleBorrow(bookId, req, res) {
  let body = ""
  req.on("data", (chunk) => {
    body += chunk.toString()
  })

  req.on("end", () => {
    try {
      console.log("üìù Borrow request for book:", bookId)
      const { borrowerName, borrowerPhone } = JSON.parse(body)
      const book = books.find((b) => b.id === bookId)

      if (!book) {
        console.log("‚ùå Book not found:", bookId)
        res.writeHead(404, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" }))
        return
      }

      if (!book.available) {
        console.log("‚ùå Book not available:", bookId)
        res.writeHead(400, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß" }))
        return
      }

      if (!borrowerName) {
        console.log("‚ùå No borrower name provided")
        res.writeHead(400, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°" }))
        return
      }

      const borrowedDate = new Date().toISOString().split("T")[0]
      const dueDate = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split("T")[0]

      // Update book
      book.available = false
      book.borrowedBy = borrowerName
      book.borrowerPhone = borrowerPhone
      book.borrowedDate = borrowedDate
      book.dueDate = dueDate

      // Add to history
      const historyRecord = {
        id: Date.now().toString(),
        bookId: book.id,
        bookTitle: book.title,
        borrower: borrowerName,
        borrowerPhone: borrowerPhone,
        borrowedDate: borrowedDate,
        dueDate: dueDate,
        status: "borrowed",
      }
      history.push(historyRecord)

      console.log("‚úÖ Book borrowed successfully:", book.title, "by", borrowerName)
      res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" })
      res.end(JSON.stringify({ message: "‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", book }))
    } catch (error) {
      console.error("‚ùå Borrow error:", error)
      res.writeHead(400, { "Content-Type": "application/json; charset=utf-8" })
      res.end(JSON.stringify({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }))
    }
  })
}

function handleReturn(bookId, req, res) {
  let body = ""
  req.on("data", (chunk) => {
    body += chunk.toString()
  })

  req.on("end", () => {
    try {
      console.log("üìù Return request for book:", bookId)
      const { borrowerName, borrowerPhone } = JSON.parse(body)
      const book = books.find((b) => b.id === bookId)

      if (!book) {
        console.log("‚ùå Book not found:", bookId)
        res.writeHead(404, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" }))
        return
      }

      if (book.available) {
        console.log("‚ùå Book not borrowed:", bookId)
        res.writeHead(400, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°" }))
        return
      }

      // Verify borrower identity
      if (book.borrowedBy !== borrowerName) {
        console.log("‚ùå Borrower name mismatch:", book.borrowedBy, "vs", borrowerName)
        res.writeHead(403, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" }))
        return
      }

      if (borrowerPhone && book.borrowerPhone && book.borrowerPhone !== borrowerPhone) {
        console.log("‚ùå Phone number mismatch")
        res.writeHead(403, { "Content-Type": "application/json; charset=utf-8" })
        res.end(JSON.stringify({ error: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" }))
        return
      }

      const returnedDate = new Date().toISOString().split("T")[0]

      // Update book
      book.available = true
      delete book.borrowedBy
      delete book.borrowerPhone
      delete book.borrowedDate
      delete book.dueDate

      // Update history
      const historyRecord = history.find(
        (h) => h.bookId === book.id && h.borrower === borrowerName && h.status === "borrowed",
      )

      if (historyRecord) {
        historyRecord.returnedDate = returnedDate
        historyRecord.status = "returned"
      }

      console.log("‚úÖ Book returned successfully:", book.title, "by", borrowerName)
      res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" })
      res.end(JSON.stringify({ message: "‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", book }))
    } catch (error) {
      console.error("‚ùå Return error:", error)
      res.writeHead(400, { "Content-Type": "application/json; charset=utf-8" })
      res.end(JSON.stringify({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }))
    }
  })
}

server.listen(PORT, () => {
  console.log(`üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`)
  console.log(`üìñ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:${PORT}`)
  console.log(`üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API: http://localhost:${PORT}/api/test`)
  console.log(`üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ${books.length} ‡πÄ‡∏•‡πà‡∏°`)
  console.log(`üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: ${history.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
  console.log(`‚èπÔ∏è  ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏Å‡∏î Ctrl+C`)
  console.log(`\nüìö ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ:`)
  console.log(`   ‚úÖ ‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠`)
  console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô`)
  console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°`)
  console.log(`   ‚úÖ ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î`)
  console.log(`   ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á npm install`)
})

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...")
  console.log("‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
  process.exit(0)
})
