const express = require("express")
const mongoose = require("mongoose")
const cors = require("cors")
const path = require("path")
const http = require("http")
const fs = require("fs")
const url = require("url")
const bcrypt = require("bcryptjs") // ‡πÄ‡∏û‡∏¥‡πà‡∏° bcryptjs
const jwt = require("jsonwebtoken") // ‡πÄ‡∏û‡∏¥‡πà‡∏° jsonwebtoken
require("dotenv").config()

const app = express()
const PORT = process.env.PORT || 3000
const JWT_SECRET = process.env.JWT_SECRET || "supersecretjwtkey" // ‡∏î‡∏∂‡∏á JWT_SECRET ‡∏à‡∏≤‡∏Å .env

// Middleware
app.use(cors())
app.use(express.json())
app.use(express.static(__dirname))

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI || "mongodb+srv://LLL:LLL@000.4sgleop.mongodb.net/?retryWrites=true&w=majority&appName=000", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
const db = mongoose.connection
db.on("error", console.error.bind(console, "connection error:"))
db.once("open", () => {
  console.log("Connected to MongoDB")
})

// Models
const Book = require("./models/Book")
const BorrowHistory = require("./models/BorrowHistory")
const Member = require("./models/Member") // ‡πÄ‡∏û‡∏¥‡πà‡∏° Member model

// Serve static files (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
app.get("/", (req, res) => {
  serveFile("index.html", "text/html", res)
})

function serveFile(filename, contentType, res) {
  const filePath = path.join(__dirname, filename)
  console.log("üìÑ Serving file:", filePath)

  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error('‚ùå File not found:", filePath)')
      res.writeHead(404, { "Content-Type": "text/html; charset=utf-8" })
      res.end(`
        <!DOCTYPE html>
        <html>
        <head><title>‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö</title></head>
        <body>
          <h1>‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö</h1>
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filename}</p>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö server.js</p>
        </body>
        </html>
      `)
      return
    }
    res.writeHead(200, { "Content-Type": contentType + "; charset=utf-8" })
    res.end(data)
  })
}

// API Routes

// Books API (‡πÉ‡∏ä‡πâ MongoDB)
app.get("/api/books", async (req, res) => {
  try {
    const books = await Book.find({})
    console.log("üìö Serving books data:", books.length, "books")
    res.json(books)
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

app.post("/api/books/:id/borrow", async (req, res) => {
  try {
    console.log("üìù Borrow request for book:", req.params.id)
    const { borrowerName, borrowerPhone } = req.body
    const book = await Book.findById(req.params.id)
    if (!book) {
      console.log("‚ùå Book not found:", req.params.id)
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" })
    }
    if (!book.available) {
      console.log("‚ùå Book not available:", req.params.id)
      return res.status(400).json({ error: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß" })
    }

    if (!borrowerName) {
      console.log("‚ùå No borrower name provided")
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°" })
    }

    const borrowedDate = new Date()
    const dueDate = new Date()
    dueDate.setDate(dueDate.getDate() + 14)

    book.available = false
    book.borrowedBy = borrowerName
    book.borrowerPhone = borrowerPhone
    book.borrowedDate = borrowedDate
    book.dueDate = dueDate
    await book.save()

    await BorrowHistory.create({
      bookId: book._id,
      bookTitle: book.title,
      borrower: borrowerName,
      borrowerPhone: borrowerPhone,
      borrowedDate: borrowedDate,
      dueDate: dueDate,
      status: "borrowed",
    })

    console.log("‚úÖ Book borrowed successfully:", book.title, "by", borrowerName)
    res.json({
      message: "‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      book,
    })
  } catch (error) {
    console.error("‚ùå Borrow error:", error)
    res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
  }
})

app.post("/api/books/:id/return", async (req, res) => {
  try {
    console.log("üìù Return request for book:", req.params.id)
    const { borrowerName, borrowerPhone } = req.body
    const book = await Book.findById(req.params.id)
    if (!book) {
      console.log("‚ùå Book not found:", req.params.id)
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" })
    }

    if (book.available) {
      console.log("‚ùå Book not borrowed:", req.params.id)
      return res.status(400).json({ error: "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°" })
    }

    if (book.borrowedBy !== borrowerName) {
      console.log("‚ùå Borrower name mismatch:", book.borrowedBy, "vs", borrowerName)
      return res.status(403).json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" })
    }
    if (borrowerPhone && book.borrowerPhone && book.borrowerPhone !== borrowerPhone) {
      console.log("‚ùå Phone number mismatch")
      return res.status(403).json({ error: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" })
    }

    const returnedDate = new Date()

    book.available = true
    book.borrowedBy = undefined
    book.borrowerPhone = undefined
    book.borrowedDate = undefined
    book.dueDate = undefined
    await book.save()

    await BorrowHistory.findOneAndUpdate(
      {
        bookId: book._id,
        borrower: borrowerName,
        status: "borrowed",
      },
      {
        returnedDate: returnedDate,
        status: "returned",
      },
      {
        new: true,
      },
    )

    console.log("‚úÖ Book returned successfully:", book.title, "by", borrowerName)
    res.json({
      message: "‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      book,
    })
  } catch (error) {
    console.error("‚ùå Return error:", error)
    res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
  }
})

// History API (‡πÉ‡∏ä‡πâ MongoDB)
app.get("/api/history", async (req, res) => {
  try {
    const history = await BorrowHistory.find({}).sort({ borrowedDate: -1 })
    console.log("üìú Serving history data:", history.length, "records")
    res.json(history)
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

// Borrowed Books API (‡πÉ‡∏ä‡πâ MongoDB)
app.get("/api/borrowed", async (req, res) => {
  try {
    const borrowedBooks = await Book.find({ available: false })
    console.log("üìã Serving borrowed books:", borrowedBooks.length, "books")
    res.json(borrowedBooks)
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

// Member API (‡πÉ‡∏´‡∏°‡πà)
app.get("/api/members", async (req, res) => {
  try {
    const members = await Member.find({}).select("-password") // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    console.log("üë• Serving members data:", members.length, "members")
    res.json(members)
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

// Auth API (‡πÉ‡∏´‡∏°‡πà)
app.post("/api/auth/register", async (req, res) => {
  try {
    const { name, email, phone, password } = req.body

    if (!name || !email || !phone || !password) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" })
    }

    const existingMember = await Member.findOne({ email })
    if (existingMember) {
      return res.status(400).json({ error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" })
    }

    const hashedPassword = await bcrypt.hash(password, 10) // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô

    const newMember = await Member.create({
      name,
      email,
      phone,
      password: hashedPassword,
    })

    console.log("‚úÖ New member registered:", newMember.email)
    res.status(201).json({
      message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      member: { id: newMember._id, name: newMember.name, email: newMember.email },
    })
  } catch (error) {
    console.error("‚ùå Register error:", error)
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" })
  }
})

app.post("/api/auth/login", async (req, res) => {
  try {
    const { email, password } = req.body

    if (!email || !password) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" })
    }

    const member = await Member.findOne({ email })
    if (!member) {
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
    }

    const isMatch = await bcrypt.compare(password, member.password)
    if (!isMatch) {
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
    }

    const token = jwt.sign(
      { id: member._id, email: member.email, name: member.name },
      JWT_SECRET,
      { expiresIn: "1h" }, // Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    )

    console.log("‚úÖ Member logged in:", member.email)
    res.json({
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      token,
      member: { id: member._id, name: member.name, email: member.email },
    })
  } catch (error) {
    console.error("‚ùå Login error:", error)
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" })
  }
})

// Initialize sample data (‡πÉ‡∏ä‡πâ MongoDB)
app.post("/api/init-data", async (req, res) => {
  try {
    const existingBooksCount = await Book.countDocuments()
    if (existingBooksCount > 0) {
      return res.json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" })
    }

    const sampleBooks = [
      {
        title: "‡πÅ‡∏Æ‡∏£‡πå‡∏£‡∏µ‡πà ‡∏û‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏Å‡∏±‡∏ö‡∏®‡∏¥‡∏•‡∏≤‡∏≠‡∏≤‡∏ñ‡∏£‡∏£‡∏û‡πå",
        author: "J.K. Rowling",
        category: "‡∏ô‡∏¥‡∏¢‡∏≤‡∏¢",
        coverImage: "/placeholder.svg?height=200&width=150&text=Harry+Potter",
      },
      {
        title: "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏û‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á",
        author: "‡∏®.‡∏î‡∏£.‡∏≠‡∏†‡∏¥‡∏ä‡∏±‡∏¢ ‡∏û‡∏±‡∏ô‡∏ò‡πÄ‡∏™‡∏ô",
        category: "‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        coverImage: "/placeholder.svg?height=200&width=150&text=Economics",
      },
      {
        title: "‡∏Ñ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏¥‡∏î‡∏ä‡πâ‡∏≤",
        author: "Daniel Kahneman",
        category: "‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤",
        coverImage: "/placeholder.svg?height=200&width=150&text=Thinking+Fast+Slow",
      },
      {
        title: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢",
        author: "‡∏®.‡∏î‡∏£.‡∏™‡∏∏‡∏à‡∏¥‡∏ï ‡∏ß‡∏á‡∏©‡πå‡πÄ‡∏ó‡∏®",
        category: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
        coverImage: "/placeholder.svg?height=200&width=150&text=Thai+History",
      },
      {
        title: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° JavaScript",
        author: "John Doe",
        category: "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
        coverImage: "/placeholder.svg?height=200&width=150&text=JavaScript",
      },
    ]

    await Book.insertMany(sampleBooks)
    res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" })
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

// Test API (‡πÉ‡∏ä‡πâ MongoDB)
app.get("/api/test", async (req, res) => {
  try {
    const booksCount = await Book.countDocuments()
    const historyCount = await BorrowHistory.countDocuments()
    const membersCount = await Member.countDocuments() // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    res.json({
      message: "API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥",
      timestamp: new Date().toISOString(),
      booksCount: booksCount,
      historyCount: historyCount,
      membersCount: membersCount, // ‡∏™‡πà‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    })
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

const server = http.createServer(app)

server.listen(PORT, () => {
  console.log(`üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`)
  console.log(`üìñ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:${PORT}`)
  console.log(`üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API: http://localhost:${PORT}/api/test`)
  console.log(`‚èπÔ∏è  ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏Å‡∏î Ctrl+C`)
  console.log(`\nüìö ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ:`)
  console.log(`   ‚úÖ ‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠`)
  console.log(`   ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô`)
  console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°`)
  console.log(`   ‚úÖ ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î`)
  console.log(`   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô/‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)`)
  console.log(`   ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á npm install (‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß)`)
})

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("\nüõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...")
  console.log("‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
  process.exit(0)
})
